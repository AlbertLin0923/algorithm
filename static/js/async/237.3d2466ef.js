/*! For license information please see 237.3d2466ef.js.LICENSE.txt */
(self.webpackChunkalgorithm=self.webpackChunkalgorithm||[]).push([["237"],{50227:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return a}});var t=r("69051"),l=r("72525");function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",div:"div",pre:"pre",code:"code"},(0,l.useMDXComponents)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"\u4E8C\u53C9\u641C\u7D22\u6811",children:["\u4E8C\u53C9\u641C\u7D22\u6811",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#\u4E8C\u53C9\u641C\u7D22\u6811",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://leetcode.cn/problems/validate-binary-search-tree/description/",target:"_blank",rel:"noopener noreferrer",children:"98. \u9A8C\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811"}),"(\u4E2D\u7B49)"]}),"\n",(0,t.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,t.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,t.jsx)(n.div,{className:"rspress-directive-content",children:(0,t.jsx)(n.p,{children:"\u8FD9\u91CC\u9700\u8981\u6CE8\u610F\uFF0C\u6574\u9897\u6811\u5DE6\u4FA7\u90FD\u5FC5\u987B\u5C0F\u4E8E\u6839\u8282\u70B9\uFF0C\u53F3\u4FA7\u4E5F\u5982\u6B64\uFF1B\u800C\u4E0D\u4EC5\u4EC5\u662F\u5DE6\u8282\u70B9\u5C0F\u4E8E\u6839\u8282\u70B9\uFF0C\u53F3\u8282\u70B9\u5927\u4E8E\u6839\u8282\u70B9"})})]}),"\n",(0,t.jsx)(n.p,{children:"\u9519\u8BEF\u89E3\u6CD5\uFF1A"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function (root) {\n  if (root === null) return false\n  function traversal(node) {\n    if (node === null) return null\n    const left = traversal(node.left)\n    const right = traversal(node.right)\n    if (left === false || right === false) {\n      return false\n    } else if (left !== null && left >= node.val) {\n      return false\n    } else if (right !== null && right <= node.val) {\n      return false\n    }\n    return node.val\n  }\n  return traversal(root) !== false\n};\n\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function (root) {\n  const compare = (root, lower, upper) => {\n    if (root === null) {\n      return true\n    }\n    if (root.val <= lower || root.val >= upper) {\n      return false\n    }\n    return compare(root.left, lower, root.val) && compare(root.right, root.val, upper)\n  }\n  return compare(root, -Infinity, Infinity)\n};\n"})})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.useMDXComponents)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}var a=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["guide%2Fbinary-tree%2Fbinary-search-tree.mdx"]={toc:[],title:"\u4E8C\u53C9\u641C\u7D22\u6811",frontmatter:{}}}}]);