/*! For license information please see 753.2d1f8d8b.js.LICENSE.txt */
(self.webpackChunkalgorithm=self.webpackChunkalgorithm||[]).push([["753"],{92866:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return u}});var t=r("69051"),l=r("72525");function i(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",pre:"pre",code:"code"},(0,l.useMDXComponents)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"\u5E7F\u5EA6\u4F18\u5148",children:["\u5E7F\u5EA6\u4F18\u5148",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#\u5E7F\u5EA6\u4F18\u5148",children:"#"})]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u4E5F\u5C31\u662F \u5E7F\u5EA6\u4F18\u5148\u7B97\u6CD5 bfs Breadth First Search"}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"\u53C2\u8003\u8D44\u6599",children:["\u53C2\u8003\u8D44\u6599",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#\u53C2\u8003\u8D44\u6599",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.cnblogs.com/echolun/p/13328927.html",target:"_blank",rel:"noopener noreferrer",children:"JS \u524D\u5E8F\u904D\u5386\u3001\u4E2D\u5E8F\u904D\u5386\u3001\u540E\u5E8F\u904D\u5386\u3001\u5C42\u5E8F\u904D\u5386\u8BE6\u89E3\uFF0C\u6DF1\u5EA6\u4F18\u5148\u4E0E\u5E7F\u5EA6\u4F18\u5148\u533A\u522B\uFF0C\u9644 leetcode \u4F8B\u9898\u9898\u89E3\u7B54\u6848"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.cnblogs.com/echolun/p/16219070.html",target:"_blank",rel:"noopener noreferrer",children:"\u4E94\u4E09\u60F3\u4F11\u606F\uFF0C\u4ECA\u5929\u8FD8\u5B66\u4E60\uFF0C\u56FE\u89E3\u4E8C\u53C9\u6811\u7684\u5C42\u5E8F\u904D\u5386 BFS\uFF08\u5E7F\u5EA6\u4F18\u5148\uFF09\u6A21\u677F\uFF0C\u9644\u9762\u8BD5\u9898\u9898\u89E3"})}),"\n",(0,t.jsxs)(n.h2,{id:"\u5C42\u5E8F\u904D\u5386",children:["\u5C42\u5E8F\u904D\u5386",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#\u5C42\u5E8F\u904D\u5386",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://leetcode.cn/problems/binary-tree-level-order-traversal/description/",target:"_blank",rel:"noopener noreferrer",children:"102. \u4E8C\u53C9\u6811\u7684\u5C42\u5E8F\u904D\u5386"}),"(\u4E2D\u7B49)"]}),"\n",(0,t.jsx)(n.p,{children:"\u8FED\u4EE3\u65B9\u5F0F\u89E3\u51B3\uFF1A"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function (root) {\n  if (root === null) return [];\n  const res = [];\n  const queue = [root];\n  while (queue.length) {\n    const len = queue.length;\n    const level = [];\n    for (let i = 0; i < len; i++) {\n      const current = queue.shift();\n      level.push(current.val);\n      current.left && queue.push(current.left);\n      current.right && queue.push(current.right);\n    }\n    res.push(level);\n  }\n  return res;\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u9012\u5F52\u65B9\u5F0F\u89E3\u51B3\uFF1A"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function (root) {\n  const res = [];\n  function traversal(root, depth) {\n    if (root !== null) {\n      if (!res[depth]) {\n        res[depth] = [];\n      }\n      res[depth].push(root.val);\n      root.left && traversal(root.left, depth + 1);\n      root.right && traversal(root.right, depth + 1);\n    }\n  }\n  traversal(root, 0);\n  return res;\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/description/",target:"_blank",rel:"noopener noreferrer",children:"103. \u4E8C\u53C9\u6811\u7684\u952F\u9F7F\u5F62\u5C42\u5E8F\u904D\u5386"}),"(\u4E2D\u7B49)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar zigzagLevelOrder = function (root) {\n  if (root === null) return [];\n  const queue = [root];\n  const result = [];\n  while (queue.length) {\n    const len = queue.length;\n    const level = [];\n    for (let i = 0; i < len; i++) {\n      const current = queue.shift();\n      level.push(current.val);\n      current.left && queue.push(current.left);\n      current.right && queue.push(current.right);\n    }\n    result.push(level);\n  }\n  return result.map((i, index) => (index % 2 === 1 ? i.reverse() : i));\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/",target:"_blank",rel:"noopener noreferrer",children:"104. \u4E8C\u53C9\u6811\u7684\u6700\u5927\u6DF1\u5EA6"}),"(\u7B80\u5355)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxDepth = function (root) {\n  if (!root) return 0;\n  if (!root.left && !root.right) return 1;\n  let result = 1;\n  const queue = [root];\n  while (queue.length) {\n    // \u5F53\u524D\u5C42\u7684\u8282\u70B9\u4E2A\u6570\n    const len = queue.length;\n    // \u9010\u4E2A\u8BA9\u5F53\u524D\u5C42\u7684\u8282\u70B9\u51FA\u5217\n    for (let i = 0; i < len; i++) {\n      const current = queue.shift();\n      current.left && queue.push(current.left);\n      current.right && queue.push(current.right);\n    }\n    // \u5F53\u524D\u5C42\u6240\u6709\u8282\u70B9\u5DF2\u7ECF\u51FA\u5217\uFF0C\u5982\u679C\u961F\u5217\u4E0D\u4E3A\u7A7A\uFF0C\u8BF4\u660E\u6709\u4E0B\u4E00\u5C42\u8282\u70B9\uFF0Cdepth+1\n    if (queue.length) {\n      result++;\n    }\n  }\n  return result;\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://leetcode.cn/problems/minimum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer",children:"111. \u4E8C\u53C9\u6811\u7684\u6700\u5C0F\u6DF1\u5EA6"}),"(\u7B80\u5355)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function (root) {\n  if (!root) return 0;\n  if (!root.left && !root.right) return 1;\n  let result = 1;\n  const queue = [root];\n  while (queue.length) {\n    const len = queue.length;\n    for (let index = 0; index < len; index++) {\n      const current = queue.shift();\n      if (!current.left && !current.right) {\n        return result;\n      } else {\n        current.left && queue.push(current.left);\n        current.right && queue.push(current.right);\n      }\n    }\n    result++;\n  }\n  return result;\n};\n"})})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.useMDXComponents)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}var u=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["guide%2Fbinary-tree%2Fbfs.mdx"]={toc:[{text:"\u53C2\u8003\u8D44\u6599",id:"\u53C2\u8003\u8D44\u6599",depth:2},{text:"\u5C42\u5E8F\u904D\u5386",id:"\u5C42\u5E8F\u904D\u5386",depth:2}],title:"\u5E7F\u5EA6\u4F18\u5148",frontmatter:{}}}}]);