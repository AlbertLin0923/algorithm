/*! For license information please see 650.b5aa13e4.js.LICENSE.txt */
(self.webpackChunkalgorithm=self.webpackChunkalgorithm||[]).push([["650"],{14095:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return l}});var t=r("69051"),i=r("72525");function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",div:"div",pre:"pre",code:"code"},(0,i.useMDXComponents)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"\u4E8C\u53C9\u5E73\u8861\u6811",children:["\u4E8C\u53C9\u5E73\u8861\u6811",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#\u4E8C\u53C9\u5E73\u8861\u6811",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://leetcode.cn/problems/balanced-binary-tree/description/",target:"_blank",rel:"noopener noreferrer",children:"110. \u5E73\u8861\u4E8C\u53C9\u6811"}),"(\u7B80\u5355)"]}),"\n",(0,t.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,t.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,t.jsxs)(n.div,{className:"rspress-directive-content",children:[(0,t.jsx)(n.p,{children:"\u540E\u5E8F\u904D\u5386\u4E8C\u53C9\u6811"}),"\n",(0,t.jsx)(n.p,{children:"\u5728\u904D\u5386\u4E8C\u53C9\u6811\u6BCF\u4E2A\u8282\u70B9\u524D\u90FD\u4F1A\u904D\u5386\u5176\u5DE6\u53F3\u5B50\u6811"}),"\n",(0,t.jsx)(n.p,{children:"\u6BD4\u8F83\u5DE6\u53F3\u5B50\u6811\u7684\u6DF1\u5EA6\uFF0C\u82E5\u5DEE\u503C\u5927\u4E8E1 \u5219\u8FD4\u56DE\u4E00\u4E2A\u6807\u8BB0 -1\u8868\u793A\u5F53\u524D\u5B50\u6811\u4E0D\u5E73\u8861"}),"\n",(0,t.jsx)(n.p,{children:"\u5DE6\u53F3\u5B50\u6811\u6709\u4E00\u4E2A\u4E0D\u662F\u5E73\u8861\u7684\uFF0C\u6216\u5DE6\u53F3\u5B50\u6811\u5DEE\u503C\u5927\u4E8E1\uFF0C\u5219\u6574\u8BFE\u6811\u4E0D\u5E73\u8861"}),"\n",(0,t.jsx)(n.p,{children:"\u82E5\u5DE6\u53F3\u5B50\u6811\u5E73\u8861\uFF0C\u8FD4\u56DE\u5F53\u524D\u6811\u7684\u6DF1\u5EA6\uFF08\u5DE6\u53F3\u5B50\u6811\u7684\u6DF1\u5EA6\u6700\u5927\u503C+1\uFF09\n"})]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isBalanced = function (root) {\n  function traversal(node) {\n    if (node === null) {\n      return 0\n    }\n    const left = traversal(node.left)\n    const right = traversal(node.right)\n    if (left === -1 || right === -1 || Math.abs(left - right) > 1) {\n      return -1\n    }\n    return Math.max(left, right) + 1\n  }\n\n  return traversal(root) !== -1\n};\n"})})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.useMDXComponents)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}var l=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["guide%2Fbinary-tree%2Fbalanced-binary-tree.mdx"]={toc:[],title:"\u4E8C\u53C9\u5E73\u8861\u6811",frontmatter:{}}}}]);